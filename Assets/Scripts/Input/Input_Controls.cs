//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input_Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input_Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input_Controls"",
    ""maps"": [
        {
            ""name"": ""PC_Controls"",
            ""id"": ""36136bd3-0bc1-43ec-ab74-155ced7db2f9"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8498e763-a3b6-4839-95e9-36d8505cc488"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""28e5ae4c-fe87-4d11-8c9b-207e72ec94ba"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Next"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cc5c17a4-3897-4131-b79e-0cdf3bfef6cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5d645b5d-d5b4-4ef0-b88c-52e942dcdcdf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ModeSwitch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d7fdc2f8-459a-47dd-b663-520c6ca881ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WateringCanMode"",
                    ""type"": ""PassThrough"",
                    ""id"": ""aa10cc34-7d90-48b9-81b0-e3d838ba87db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f2070871-ee63-40f0-9376-241abdf69066"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpaceBar"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2d14b707-7ee2-4ebc-ac0a-5b5a4e68d7bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""6499460f-5635-4559-ba30-7c787f55c1c0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b04f14f7-d4ea-44c8-abaa-ede8dd532435"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41722b2b-7bb0-420e-b0c6-7e6e5cab42e1"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d1ddb8d-4b04-4740-8e1e-3d4e96966ee6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2ce2abd-cd72-4aa0-9e2a-71088aadea05"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06602704-b9a2-405a-94f8-b9d241e914cb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpaceBar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""563b2c44-f2a0-4f21-917b-f5b2d40472df"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e4fd2b7b-2020-42ec-a906-358a75ed7a33"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""20260f6b-268c-41e6-9492-48023874c8d3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e35efd94-c20b-4874-99e6-3270e1505d8f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2acce36c-fbfe-4854-8927-a5f8556ee8ef"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5e0cbb70-9ce5-407d-82f8-3675856300c0"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ModeSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f0c2609-347b-41d3-88b9-6616c939e7b2"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WateringCanMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc8b1b64-0ef2-4f1f-8faa-a80680dd5ec9"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PC_Controls
        m_PC_Controls = asset.FindActionMap("PC_Controls", throwIfNotFound: true);
        m_PC_Controls_LeftClick = m_PC_Controls.FindAction("LeftClick", throwIfNotFound: true);
        m_PC_Controls_Point = m_PC_Controls.FindAction("Point", throwIfNotFound: true);
        m_PC_Controls_Next = m_PC_Controls.FindAction("Next", throwIfNotFound: true);
        m_PC_Controls_Previous = m_PC_Controls.FindAction("Previous", throwIfNotFound: true);
        m_PC_Controls_ModeSwitch = m_PC_Controls.FindAction("ModeSwitch", throwIfNotFound: true);
        m_PC_Controls_WateringCanMode = m_PC_Controls.FindAction("WateringCanMode", throwIfNotFound: true);
        m_PC_Controls_Menu = m_PC_Controls.FindAction("Menu", throwIfNotFound: true);
        m_PC_Controls_SpaceBar = m_PC_Controls.FindAction("SpaceBar", throwIfNotFound: true);
        m_PC_Controls_Movement = m_PC_Controls.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PC_Controls
    private readonly InputActionMap m_PC_Controls;
    private List<IPC_ControlsActions> m_PC_ControlsActionsCallbackInterfaces = new List<IPC_ControlsActions>();
    private readonly InputAction m_PC_Controls_LeftClick;
    private readonly InputAction m_PC_Controls_Point;
    private readonly InputAction m_PC_Controls_Next;
    private readonly InputAction m_PC_Controls_Previous;
    private readonly InputAction m_PC_Controls_ModeSwitch;
    private readonly InputAction m_PC_Controls_WateringCanMode;
    private readonly InputAction m_PC_Controls_Menu;
    private readonly InputAction m_PC_Controls_SpaceBar;
    private readonly InputAction m_PC_Controls_Movement;
    public struct PC_ControlsActions
    {
        private @Input_Controls m_Wrapper;
        public PC_ControlsActions(@Input_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClick => m_Wrapper.m_PC_Controls_LeftClick;
        public InputAction @Point => m_Wrapper.m_PC_Controls_Point;
        public InputAction @Next => m_Wrapper.m_PC_Controls_Next;
        public InputAction @Previous => m_Wrapper.m_PC_Controls_Previous;
        public InputAction @ModeSwitch => m_Wrapper.m_PC_Controls_ModeSwitch;
        public InputAction @WateringCanMode => m_Wrapper.m_PC_Controls_WateringCanMode;
        public InputAction @Menu => m_Wrapper.m_PC_Controls_Menu;
        public InputAction @SpaceBar => m_Wrapper.m_PC_Controls_SpaceBar;
        public InputAction @Movement => m_Wrapper.m_PC_Controls_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PC_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PC_ControlsActions set) { return set.Get(); }
        public void AddCallbacks(IPC_ControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_PC_ControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PC_ControlsActionsCallbackInterfaces.Add(instance);
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
            @Point.started += instance.OnPoint;
            @Point.performed += instance.OnPoint;
            @Point.canceled += instance.OnPoint;
            @Next.started += instance.OnNext;
            @Next.performed += instance.OnNext;
            @Next.canceled += instance.OnNext;
            @Previous.started += instance.OnPrevious;
            @Previous.performed += instance.OnPrevious;
            @Previous.canceled += instance.OnPrevious;
            @ModeSwitch.started += instance.OnModeSwitch;
            @ModeSwitch.performed += instance.OnModeSwitch;
            @ModeSwitch.canceled += instance.OnModeSwitch;
            @WateringCanMode.started += instance.OnWateringCanMode;
            @WateringCanMode.performed += instance.OnWateringCanMode;
            @WateringCanMode.canceled += instance.OnWateringCanMode;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
            @SpaceBar.started += instance.OnSpaceBar;
            @SpaceBar.performed += instance.OnSpaceBar;
            @SpaceBar.canceled += instance.OnSpaceBar;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPC_ControlsActions instance)
        {
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
            @Point.started -= instance.OnPoint;
            @Point.performed -= instance.OnPoint;
            @Point.canceled -= instance.OnPoint;
            @Next.started -= instance.OnNext;
            @Next.performed -= instance.OnNext;
            @Next.canceled -= instance.OnNext;
            @Previous.started -= instance.OnPrevious;
            @Previous.performed -= instance.OnPrevious;
            @Previous.canceled -= instance.OnPrevious;
            @ModeSwitch.started -= instance.OnModeSwitch;
            @ModeSwitch.performed -= instance.OnModeSwitch;
            @ModeSwitch.canceled -= instance.OnModeSwitch;
            @WateringCanMode.started -= instance.OnWateringCanMode;
            @WateringCanMode.performed -= instance.OnWateringCanMode;
            @WateringCanMode.canceled -= instance.OnWateringCanMode;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
            @SpaceBar.started -= instance.OnSpaceBar;
            @SpaceBar.performed -= instance.OnSpaceBar;
            @SpaceBar.canceled -= instance.OnSpaceBar;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPC_ControlsActions instance)
        {
            if (m_Wrapper.m_PC_ControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPC_ControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_PC_ControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PC_ControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PC_ControlsActions @PC_Controls => new PC_ControlsActions(this);
    public interface IPC_ControlsActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
        void OnNext(InputAction.CallbackContext context);
        void OnPrevious(InputAction.CallbackContext context);
        void OnModeSwitch(InputAction.CallbackContext context);
        void OnWateringCanMode(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
        void OnSpaceBar(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
}
